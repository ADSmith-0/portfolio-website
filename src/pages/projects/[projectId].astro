---
import RepoLink from "@components/RepoLink.astro";
import TechnologyIcons from "@components/TechnologyIcons.astro";
import Page from "@layouts/Page.astro";
import type { GetStaticPaths } from "astro";
import { projects } from "src/projects";
import type { Project } from "src/types";

export const getStaticPaths = (() =>
  projects.map(({ id }) => ({
    params: { projectId: id },
  }))) satisfies GetStaticPaths;

const { projectId } = Astro.params;

const project: Project = projects.find(({ id }) => id === projectId)!;
---

<Page title={project.name}>
  <div class="px-5 background">
    <h1>{project.name}</h1>
    <p>{project.description}</p>
    {
      (project.versions?.length ?? 0) > 0 && (
        <h2 class="mt-8 text-secondary fs-xl fw-normal">Previous Versions</h2>
      )
    }
    {
      project.versions?.map((version) => (
        <div class="previous-version-container mt-5 br-3 p-5">
          <span class="grid">
            <h3 class="pt-0 fs-2xl">{version.version}</h3>
            <span class="flex-row-center">
              <p class="text-secondary semibold pr-4">Using</p>
              <TechnologyIcons
                technologies={version.technologies}
                size={32}
                spacing={4}
              />
            </span>
            {version.repo !== "" && (
              <div class="fit-content">
                <RepoLink repo={version.repo} />
              </div>
            )}
          </span>
          <p class="mt-3 text-secondary">{version.description}</p>
        </div>
      ))
    }
  </div>
</Page>

<style>
  html {
    background-image: repeating-linear-gradient(
        90deg,
        transparent,
        transparent var(--bg-pattern-size),
        var(--bg-color-accent) var(--bg-pattern-size),
        var(--bg-color-accent) calc(var(--bg-pattern-size) + 1px)
      ),
      repeating-linear-gradient(
        0deg,
        transparent,
        transparent var(--bg-pattern-size),
        var(--bg-color-accent) var(--bg-pattern-size),
        var(--bg-color-accent) calc(var(--bg-pattern-size) + 1px)
      );
  }

  .previous-version-container {
    background-color: hsl(var(--grey-950));
    border: var(--spacing-1) solid hsl(var(--grey-900));
    transition: border-color 200ms ease-in-out;

    &:is(:hover, :focus-visible) {
      border-color: hsl(var(--grey-800));
    }
  }

  .grid {
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    & > *:nth-child(2) {
      justify-self: center;
    }
    & > *:nth-child(3) {
      justify-self: end;
    }
  }
</style>
