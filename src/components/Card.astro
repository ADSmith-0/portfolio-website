---
import Logo from "@components/Logo.astro";
import { projects } from "src/projects";
import { technologyFromId } from "src/technologies";
import type { Project, ProjectId } from "src/types";
import Svg from "./Svg.astro";

interface Props {
  projectId: ProjectId;
  title: string;
}

const { projectId, title } = Astro.props;

const project: Project = projects.find(({ id }) => id === projectId)!;
---

<li
  class="card flex-column align-items-start p-6 br-3 h-100 border-box"
  style={`--border-colour: ${project.colour};`}
>
  <div class="flex-row-center justify-between self-stretch align-items-start">
    {
      project.technologies.length > 1 ? (
        <Logo id={projectId} size={55} />
      ) : (
        <a
          class="block m-0"
          href={technologyFromId[project.technologies[0]].link}
          title={technologyFromId[project.technologies[0]].name}
          target="_blank"
          rel="noreferrer"
        >
          <Logo id={project.technologies[0]} size={55} />
        </a>
      )
    }
    <a
      href=`/projects/${projectId}`
      class="details-link flex-row-center px-4 py-3 gap-1 br-2"
      target="_blank"
      rel="noreferrer"
    >
      <span class="details-text semibold pl-3">Details</span>
      <span class="details-icon flex-row-center">
        <Svg id="chevron-right" size={22} />
      </span>
    </a>
  </div>
  <h2 class="fs-2xl pt-5">{title}</h2>
  {
    project.technologies.length > 1 && (
      <div class="flex-row-center flex-wrap gap-2">
        {project.technologies.map((tagId) => {
          const tag = technologyFromId[tagId];
          return (
            <div class="pr-3 py-1">
              <a
                target="_blank"
                class="block m-0"
                href={tag.link}
                title={tag.name}
              >
                <Logo id={tagId} size={30} />
              </a>
            </div>
          );
        })}
      </div>
    )
  }
  <p class="overflow text-secondary" set:html={project.description} />
  <div class="flex-row-center gap-3 w-100">
    <span class={project.repo === "" ? "cursor-blocked" : ""}>
      <a
        href={project.repo}
        class="btn"
        aria-disabled={project.repo === ""}
        target="_blank"
        rel="noreferrer"
      >
        <Svg id="github" size={20} />
        Repo
      </a>
    </span>
    {
      project.link !== "" && (
        <a href={project.link} class="btn">
          <Svg id="outlink" size={20} />
          Open
        </a>
      )
    }
  </div>
</li>
<style>
  li {
    list-style: none;

    &.card {
      border: var(--spacing-2) solid hsl(var(--grey-800));
      transition: border-color 0.1s ease-in-out;
      text-decoration: none;
      min-width: var(--card-width);
      background-color: hsl(var(--grey-900) / 0.2);

      --_blur: var(--spacing-3);

      &:is(:hover, :focus-within) {
        border-color: var(--border-colour);
        background-color: hsl(var(--grey-900) / 0.7);
        box-shadow:
          0 0 var(--_blur) var(--border-colour),
          inset 0 0 var(--_blur) var(--border-colour);
      }

      & .overflow {
        --_line-height: 1.35em;
        --_number_of_lines: 4;
        --_height: calc(var(--_number_of_lines) * var(--_line-height));
        display: block;
        display: -webkit-box;
        -webkit-line-clamp: var(--_number_of_lines);
        -webkit-box-orient: vertical;
        line-height: var(--_line-height);
        flex: 0 1 var(--_height);
        overflow: hidden;
        text-overflow: ellipsis;
        max-height: var(--_height);
      }

      & .details-link {
        /* Styling */
        justify-content: flex-end;
        background-color: hsl(var(--grey-800) / 0.5);

        /* Animation */
        text-decoration: none;
        width: var(--spacing-6);
        overflow-x: clip;
        interpolate-size: allow-keywords;
        white-space: nowrap;
        transition: all 400ms ease-in-out;

        & .details-text {
          visibility: hidden;
        }

        &:is(:hover, :focus-visible) {
          /* border-color: hsl(var(--grey-800)); */
          background-color: hsl(var(--grey-800));
          width: fit-content;

          & .details-text {
            visibility: visible;
          }
        }
      }

      & .btn {
        --_bg-color: hsl(var(--grey-900) / 0.5);
        display: flex;
        align-items: center;
        border-radius: var(--spacing-2);
        border: var(--spacing-1) solid hsl(var(--grey-800));
        text-decoration: none;
        padding: var(--spacing-3) var(--spacing-4);
        gap: var(--spacing-2);
        background-color: var(--_bg-color);
        transition: background-color 50ms linear;

        &:is(:hover, :focus-visible) {
          background-color: hsl(var(--grey-800));
        }

        &[aria-disabled="true"] {
          pointer-events: none;
          --_stripe-color: hsl(var(--grey-800) / 0.5);
          background-image: repeating-linear-gradient(
            135deg,
            var(--_bg-color),
            var(--_bg-color) var(--spacing-3),
            var(--_stripe-color) var(--spacing-3),
            var(--_stripe-color) var(--spacing-4)
          );
        }
      }
    }
  }
</style>
